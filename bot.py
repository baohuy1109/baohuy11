from keep_alive import keep_alive
import telebot
import requests
import time
import threading
from functools import wraps

keep_alive()

# Token bot Telegram
TOKEN = "6367532329:AAEuSSv8JuGKzJQD6qI431udTvdq1l25zo0"
bot = telebot.TeleBot(TOKEN)

# ID nh√≥m v√† ID admin
GROUP_IDS = [-1002221629819, -1002334731264]  # C√°c nh√≥m ƒë∆∞·ª£c ph√©p d√πng bot
ADMIN_ID = 5736655322  # ID admin (b·∫°n)

# Cooldown dictionary
user_cooldowns = {}
auto_buff_tasks = {}

# H√†m ki·ªÉm tra cooldown
def is_on_cooldown(user_id, command):
    now = time.time()
    key = f"{user_id}_{command}"
    if key in user_cooldowns and now - user_cooldowns[key] < 30:
        return True
    user_cooldowns[key] = now
    return False

# Decorator: ch·ªâ cho ph√©p trong nh√≥m
def only_in_group(func):
    @wraps(func)
    def wrapper(message):
        if message.chat.id not in GROUP_IDS:
            bot.reply_to(message, "‚ùå L·ªánh n√†y ch·ªâ s·ª≠ d·ª•ng trong nh√≥m ƒë∆∞·ª£c cho ph√©p.")
            return
        return func(message)
    return wrapper

# Decorator: ch·ªâ cho ph√©p admin
def only_admin(func):
    @wraps(func)
    def wrapper(message):
        if message.from_user.id != ADMIN_ID:
            bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
            return
        return func(message)
    return wrapper

# Auto buff followers TikTok
def auto_buff(username, chat_id, user_id):
    if user_id not in auto_buff_tasks:
        return  # Ng∆∞·ªùi d√πng ƒë√£ hu·ª∑ treo

    api_url = f"https://dichvukey.site/fl.php?username={username}&key=ngocanvip"
    try:
        response = requests.get(api_url, timeout=60)
        data = response.json()

        message = (
            f"‚úÖ Auto buff cho `@{username}` th√†nh c√¥ng!\n\n"
            f"‚ûï Th√™m: {data.get('followers_add', 0)} followers\n"
            f"üí¨ {data.get('message', 'Kh√¥ng r√µ')}"
        )
        bot.send_message(chat_id, message, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå L·ªói buff auto: {e}")

    if user_id in auto_buff_tasks:
        task = threading.Timer(900, auto_buff, args=[username, chat_id, user_id])
        auto_buff_tasks[user_id] = task
        task.start()

# L·ªánh /start
@bot.message_handler(commands=['start'])
@only_in_group
def handle_start(message):
    text = (
        "üëã Ch√†o b·∫°n!\n"
        "D√πng c√°c l·ªánh sau:\n\n"
        "`/buff <username>` - Buff followers TikTok (API 2)\n"
        "`/fl3 <username>` - Buff followers TikTok (API 3)\n"
        "`/treo <username>` - T·ª± ƒë·ªông buff m·ªói 15 ph√∫t (Admin)\n"
        "`/huytreo` - Hu·ª∑ treo auto buff\n\n"
        "V√≠ d·ª•: `/buff baohuydz158`, `/treo baohuydz158`"
    )
    bot.reply_to(message, text, parse_mode="Markdown")

# L·ªánh /buff
@bot.message_handler(commands=['buff'])
@only_in_group
def handle_buff(message):
    if is_on_cooldown(message.from_user.id, 'buff'):
        bot.reply_to(message, "‚è≥ Vui l√≤ng ƒë·ª£i 30 gi√¢y tr∆∞·ªõc khi d√πng l·∫°i.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùó Vui l√≤ng nh·∫≠p username. V√≠ d·ª•: `/buff baohuydz158`", parse_mode="Markdown")
        return

    username = parts[1].lstrip("@")
    api_url = f"https://dichvukey.site/fl.php?username={username}&key=ngocanvip"

    bot.send_chat_action(message.chat.id, "typing")
    try:
        response = requests.get(api_url, timeout=60)
        data = response.json()
    except Exception:
        bot.reply_to(message, "‚ùå L·ªói API ho·∫∑c l·ªói m·∫°ng.")
        return

    if str(data.get("status", "")).lower() not in ["true", "1", "success"]:
        bot.reply_to(message, f"‚úÖTh√¥ng b√°o: {data.get('message', 'Kh√¥ng r√µ')}")
        return

    reply = (
        f"‚úÖ *Buff Followers Th√†nh C√¥ng!*\n\n"
        f"üë• *Tr∆∞·ªõc:* {data.get('followers_before', 'N/A')}\n"
        f"üë• *Sau:* {data.get('followers_after', 'N/A')}\n"
        f"‚ú® *Th√™m:* {data.get('followers_add', 'N/A')}\n"
        f"üí¨ *Ghi ch√∫:* {data.get('message', '')}"
    )
    bot.reply_to(message, reply, parse_mode="Markdown")

# L·ªánh /fl3 (d√πng API m·ªõi)
@bot.message_handler(commands=['fl3'])
@only_in_group
def handle_fl3(message):
    if is_on_cooldown(message.from_user.id, 'fl3'):
        bot.reply_to(message, "‚è≥ Vui l√≤ng ƒë·ª£i 30 gi√¢y tr∆∞·ªõc khi d√πng l·∫°i.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùó Vui l√≤ng nh·∫≠p username. V√≠ d·ª•: `/fl3 ngocanvip`", parse_mode="Markdown")
        return

    username = parts[1].lstrip("@")
    api_url = f"https://nvp310107.x10.mx/fltik.php?username={username}&key=30T42025VN"

    bot.send_chat_action(message.chat.id, "typing")
    try:
        response = requests.get(api_url, timeout=30)
        data = response.json()
    except Exception:
        bot.reply_to(message, "‚ùå L·ªói API ho·∫∑c l·ªói m·∫°ng.")
        return

    reply = (
        f"‚úÖ *Buff Followers (API 3) Th√†nh C√¥ng!*\n\n"
        f"üë• *Tr∆∞·ªõc:* {data.get('followers_before', 'N/A')}\n"
        f"üë• *Sau:* {data.get('followers_after', 'N/A')}\n"
        f"‚ú® *Th√™m:* {data.get('followers_add', 'N/A')}\n"
        f"üí¨ *Ghi ch√∫:* {data.get('message', '')}\n"
        f"üîç *Tr·∫°ng th√°i:* {data.get('status', 'Kh√¥ng r√µ')}"
    )
    bot.reply_to(message, reply, parse_mode="Markdown")

# L·ªánh /treo
@bot.message_handler(commands=['treo'])
@only_in_group
@only_admin
def handle_treo(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùó Vui l√≤ng nh·∫≠p username. V√≠ d·ª•: `/treo baohuydz158`", parse_mode="Markdown")
        return

    username = parts[1].lstrip("@")
    user_id = message.from_user.id

    if user_id in auto_buff_tasks:
        bot.reply_to(message, "‚ö†Ô∏è B·∫°n ƒëang treo r·ªìi! Mu·ªën ƒë·ªïi username ph·∫£i `/huytreo` tr∆∞·ªõc.")
        return

    bot.reply_to(message, f"‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu treo buff cho `@{username}` m·ªói 15 ph√∫t.", parse_mode="Markdown")
    auto_buff_tasks[user_id] = None
    auto_buff(username, message.chat.id, user_id)

# L·ªánh /huytreo
@bot.message_handler(commands=['huytreo'])
@only_in_group
@only_admin
def handle_huytreo(message):
    user_id = message.from_user.id
    task = auto_buff_tasks.pop(user_id, None)
    if task:
        task.cancel()

    bot.reply_to(message, "‚úÖ ƒê√£ hu·ª∑ treo buff.")

# Ch·∫°y bot
if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(timeout=90, long_polling_timeout=45)
