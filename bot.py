import telebot
import openai
import os
import time
import logging
from dotenv import load_dotenv
from keep_alive import keep_alive

# === T·∫¢I .env ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or "6367532329:AAGJh1RnIa-UZGBUdzKHTy3lyKnB81NdqjM"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") or "sk-proj-xxx..."

# === C·∫§U H√åNH LOG ===
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s'
)

# === KH·ªûI T·∫†O BOT ===
bot = telebot.TeleBot(TELEGRAM_TOKEN)
keep_alive()

# === ADMIN & API KEY DANH S√ÅCH ===
ADMIN_IDS = [6367532329]
KEY_FILE = "keys.txt"
api_keys = []
current_key_index = 0

# === ƒê·ªåC KEY T·ª™ FILE ===
def load_keys():
    global api_keys
    if os.path.exists(KEY_FILE):
        with open(KEY_FILE, "r") as f:
            api_keys = [line.strip() for line in f if line.strip().startswith("sk-")]
    if not api_keys:
        api_keys = [OPENAI_API_KEY]
load_keys()

# === GHI KEY V√ÄO FILE ===
def save_keys():
    with open(KEY_FILE, "w") as f:
        f.write("\n".join(api_keys))

# === TH·ªúI GIAN UPTIME ===
start_time = time.time()
def get_uptime():
    elapsed = int(time.time() - start_time)
    h, rem = divmod(elapsed, 3600)
    m, s = divmod(rem, 60)
    return f"‚è± Uptime: {h}h {m}m {s}s"

# === L·∫§Y KEY HI·ªÜN T·∫†I ===
def get_current_key():
    return api_keys[current_key_index]

def switch_to_key(index):
    global current_key_index
    current_key_index = index
    openai.api_key = api_keys[current_key_index]

switch_to_key(0)

# === L·ªÜNH C∆† B·∫¢N ===
@bot.message_handler(commands=["start", "help"])
def welcome(message):
    bot.reply_to(message,
        "ü§ñ Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI s·ª≠ d·ª•ng GPT-4.\n\n"
        "‚úèÔ∏è G√µ b·∫•t k·ª≥ n·ªôi dung n√†o ƒë·ªÉ t√¥i tr·∫£ l·ªùi b·∫°n.\n\n"
        "üìö L·ªánh:\n/start ho·∫∑c /help - Gi·ªõi thi·ªáu bot\n/uptime - Th·ªùi gian ho·∫°t ƒë·ªông bot\n/addkey - (Ch·ªâ admin) th√™m API key"
    )

@bot.message_handler(commands=["uptime"])
def uptime(message):
    bot.reply_to(message, get_uptime())

# === L·ªÜNH TH√äM KEY CH·ªà D√ÄNH CHO ADMIN ===
@bot.message_handler(commands=['addkey'])
def add_key(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    parts = message.text.strip().split(" ", 1)
    if len(parts) != 2 or not parts[1].startswith("sk-"):
        bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p:\n`/addkey sk-...`", parse_mode='Markdown')
        return

    new_key = parts[1].strip()
    try:
        openai.api_key = new_key
        openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": "Test key"}],
            max_tokens=1,
            timeout=10
        )
        if new_key not in api_keys:
            api_keys.append(new_key)
            save_keys()
        switch_to_key(api_keys.index(new_key))
        bot.reply_to(message, f"‚úÖ ƒê√£ th√™m key m·ªõi v√† chuy·ªÉn sang s·ª≠ d·ª•ng.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.\n{e}")

# === X·ª¨ L√ù TIN NH·∫ÆN NG∆Ø·ªúI D√ôNG ===
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    username = message.from_user.username or "unknown"
    content = message.text.strip()
    logging.info(f"Ng∆∞·ªùi d√πng: @{username} | N·ªôi dung: {content}")

    wait_msg = bot.reply_to(message, "‚è≥ ƒêang x·ª≠ l√Ω...")
    for attempt in range(len(api_keys)):
        try:
            openai.api_key = get_current_key()
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": content}],
                max_tokens=1000,
                temperature=0.7
            )
            reply = response.choices[0].message.content.strip()
            bot.edit_message_text(reply, chat_id=wait_msg.chat.id, message_id=wait_msg.message_id)
            return
        except Exception as e:
            logging.error(f"L·ªói v·ªõi key index {current_key_index}: {e}")
            if attempt < len(api_keys) - 1:
                switch_to_key((current_key_index + 1) % len(api_keys))
            else:
                bot.edit_message_text(f"‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói ·ªü t·∫•t c·∫£ key:\n{e}", chat_id=wait_msg.chat.id, message_id=wait_msg.message_id)

# === KH·ªûI CH·∫†Y BOT ===
logging.info("ü§ñ Bot Telegram GPT-4 ƒëang ch·∫°y...")
bot.infinity_polling(timeout=10, long_polling_timeout=5)
